openapi: 3.0.0
info:
  title: Team Finder App
  description: >-
    Esta API se encarga de gestionar la información de la base de datos
    relacionada con la aplicacion Team Finder App.
  version: 1.0.0
  contact:
    email: alg00073@red.ujaen.es
tags:
  - name: user
    description: Un usuario es una entidad que guarda información genérica tanto de jugadores como de equipos
  - name: player
    description: Esta entidad almacena información y operaciones específicas sobre cada jugador
  - name: team
    description: Es una agregación de jugadores que contiene información sobre cada equipo
paths:
  /user/{userId}:
    get:
      tags:
        - user
      summary: Obtiene la información de un usuario en específico
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Okay. El usuario fue encontrado y devuelto satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/{userId}/{likedId}:
    patch:
      tags:
        - user
      summary: Operación para crear un like entre un equipo y un jugador o viceversa
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/likedId'
      responses:
        '200':
          description: Okay. El like fue registrado satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /player:
    post:
      tags:
        - player
      summary: Operación de registro de un nuevo jugador
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/playerDTO'
        required: true
      responses:
        '200':
          description: Okay. El jugador fue registrado satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userId'
        '400':
          $ref: '#/components/responses/BadRequest'
  /player/{playerId}:
    get:
      tags:
        - player
      summary: Obtiene la información de un jugador en específico
      parameters:
        - $ref: '#/components/parameters/playerId'
      responses:
        '200':
          description: Okay. El jugador fue encontrado y devuelto satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/playerDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - player
      summary: Operación para modificar un jugador ya registrado
      parameters:
        - $ref: '#/components/parameters/playerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/playerDTO'
        required: true
      responses:
        '200':
          description: Okay. El jugador fue modificado satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/playerDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - player
      summary: Operación para borrar un jugador ya registrado
      parameters:
        - $ref: '#/components/parameters/playerId'
      responses:
        '200':
          description: Okay. El jugador fue eliminado satisfactoriamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /team:
    post:
      tags:
        - team
      summary: Operación de registro de un nuevo equipo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/teamDTO'
        required: true
      responses:
        '200':
          description: Okay. El equipo fue registrado satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /team/{teamId}:
    get:
      tags:
        - team
      summary: Obtiene la información de un equipo en específico
      parameters:
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          description: Okay. El equipo fue encontrado y devuelto satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - team
      summary: Operación para borrar un equipo ya registrado
      parameters:
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          description: Okay. El equipo fue eliminado satisfactoriamente
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /team/{teamId}/{playerId}:
    patch:
      tags:
        - team
      summary: >-
        Operación para añadir/eliminar/ascender un miembro del equipo
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/playerId'
        - $ref: '#/components/parameters/action'
      responses:
        '200':
          description: Okay. El jugador del equipo fue modificado satisfactoriamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  responses:
    BadRequest:
      description: Los datos enviados son incorrectos o hay campos obligatorios no enviados
    NotFound:
      description: No se encontro la información requerida
  parameters:
    playerId:
      name: playerId
      in: path
      description: Identificador del jugador
      required: true
      schema:
        type: string
        format: uuid
    teamId:
      name: teamId
      in: path
      description: Identificador del equipo
      required: true
      schema:
        type: string
        format: uuid
    action:
      name: action
      in: query
      description: Parámetro que describe la acción a realizar sobre el jugador del equipo
      required: true
      schema:
        type: string
        enum: [promote, add, remove]
    userId:
      name: userId
      in: path
      description: Identificador de un usuario, ya sea equipo o jugador
      required: true
      schema:
        type: string
        format: uuid
    likedId:
      name: likedId
      in: path
      description: Identificador de un usuario que recibirá un like, ya sea equipo o jugador
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    playerDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        nickname:
          type: string
          description: Apodo del jugador
        email:
          type: string
          format: email
          pattern: \\.[Ii][Oo]$
          description: Email del jugador
        fullname:
          type: string
          description: Nombre completo del jugador
        birthday:
          type: string
          format: date
          example: "2021-01-30"
          description: Fecha de nacimiento del jugador
        gender:
          type: string
          description: Género del jugador
        preferences:
          $ref: '#/components/schemas/preferencesDTO'
    teamDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        founder:
          type: string
          format: uuid
          description: Identificador del fundador del equipo
        members:
          type: array
          description: Lista de identificadores de los miembros del equipo
          items:
            $ref: '#/components/schemas/userId'
          minItems: 1
          maxItems: 5
          uniqueItems: true
    preferencesDTO:
      type: object
      properties:
        game:
          type: string
          description: Juego en el que el jugador está interesado
        rank:
          type: string
          description: Rango del jugador dentro del juego
        role:
          type: string
          description: Rol del jugador dentro del juego
        feminine:
          type: boolean
          description: >-
            Denota la preferencia de solo visualizar equipos o jugadoras
            femeninas. Esta opción solo se tiene en cuenta si el género del
            jugador o del equipo completo es femenino
    userDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Id correspondiente a una entidad, ya sea equipo o jugador
        entityType:
          type: string
          enum: [player, team]
          description: Determina si este usuario es un jugador o un equipo
        likedEntities:
          type: array
          description: >-
            Lista de identificadores de las entidades que recibieron like por el usuario
          items:
            $ref: '#/components/schemas/userId'
          uniqueItems: true
    userId:
      type: string
      format: uuid
      description: Id correspondiente a una entidad registrada en la aplicación